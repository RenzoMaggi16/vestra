{"ast":null,"code":"// Market service for fetching real-time cryptocurrency and stock prices\n\n// API keys for external services\nconst COIN_API_KEY = 'YOUR_COINAPI_KEY'; // Replace with your actual API key\nconst ALPHA_VANTAGE_API_KEY = 'YOUR_ALPHA_VANTAGE_KEY'; // Replace with your actual API key\n\n// Cache for prices to avoid excessive API calls\nconst priceCache = {\n  data: {},\n  timestamp: 0,\n  expiryTime: 5 * 60 * 1000 // 5 minutes\n};\n\n// Helper function to determine if an asset is a cryptocurrency\nconst isCrypto = ticker => {\n  const cryptoList = ['BTC', 'ETH', 'SOL', 'ADA', 'XRP', 'DOT', 'DOGE', 'SHIB', 'AVAX', 'MATIC'];\n  return cryptoList.includes(ticker);\n};\n\n// Mock data for development\nconst MOCK_PRICES = {\n  BTC: {\n    price: 104645,\n    change_24h: 1.8\n  },\n  ETH: {\n    price: 2532,\n    change_24h: 3.2\n  },\n  SOL: {\n    price: 172,\n    change_24h: 5.7\n  },\n  ADA: {\n    price: 0.7623,\n    change_24h: 2.1\n  },\n  XRP: {\n    price: 2.41,\n    change_24h: 1.5\n  },\n  AAPL: {\n    price: 211,\n    change_24h: -0.09\n  },\n  MSFT: {\n    price: 454,\n    change_24h: 0.2\n  },\n  AMZN: {\n    price: 205,\n    change_24h: 0.5\n  },\n  GOOGL: {\n    price: 142.30,\n    change_24h: -0.3\n  },\n  TSLA: {\n    price: 237.45,\n    change_24h: 2.7\n  },\n  META: {\n    price: 325.80,\n    change_24h: 1.5\n  },\n  NVDA: {\n    price: 445.20,\n    change_24h: 3.2\n  },\n  JPM: {\n    price: 152.75,\n    change_24h: 0.3\n  },\n  V: {\n    price: 235.40,\n    change_24h: 0.7\n  },\n  WMT: {\n    price: 59.85,\n    change_24h: -0.2\n  },\n  DOT: {\n    price: 7.25,\n    change_24h: 2.3\n  },\n  DOGE: {\n    price: 0.12,\n    change_24h: 4.5\n  },\n  SHIB: {\n    price: 0.00002,\n    change_24h: 3.8\n  },\n  AVAX: {\n    price: 35.75,\n    change_24h: 6.2\n  },\n  MATIC: {\n    price: 0.85,\n    change_24h: 1.9\n  }\n};\nconst marketService = {\n  // Get current prices for a list of tickers\n  getPrices: async tickers => {\n    // Check if cache is valid\n    const now = Date.now();\n    if (now - priceCache.timestamp < priceCache.expiryTime) {\n      // Filter cached data for requested tickers\n      const cachedPrices = {};\n      let allCached = true;\n      for (const ticker of tickers) {\n        if (priceCache.data[ticker]) {\n          cachedPrices[ticker] = priceCache.data[ticker];\n        } else {\n          allCached = false;\n          break;\n        }\n      }\n      if (allCached) {\n        return cachedPrices;\n      }\n    }\n\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      const mockResult = {};\n      tickers.forEach(ticker => {\n        mockResult[ticker] = MOCK_PRICES[ticker] || {\n          price: 100,\n          change_24h: 0\n        };\n      });\n\n      // Update cache\n      priceCache.data = {\n        ...priceCache.data,\n        ...mockResult\n      };\n      priceCache.timestamp = now;\n      return mockResult;\n    }\n\n    // In production, fetch real data\n    try {\n      const cryptoTickers = tickers.filter(isCrypto);\n      const stockTickers = tickers.filter(ticker => !isCrypto(ticker));\n      const results = {};\n\n      // Fetch cryptocurrency prices\n      if (cryptoTickers.length > 0) {\n        const cryptoData = await fetchCryptoPrices(cryptoTickers);\n        Object.assign(results, cryptoData);\n      }\n\n      // Fetch stock prices\n      if (stockTickers.length > 0) {\n        const stockData = await fetchStockPrices(stockTickers);\n        Object.assign(results, stockData);\n      }\n\n      // Update cache\n      priceCache.data = {\n        ...priceCache.data,\n        ...results\n      };\n      priceCache.timestamp = now;\n      return results;\n    } catch (error) {\n      console.error('Error fetching market prices:', error);\n      throw error;\n    }\n  }\n};\n\n// Function to fetch cryptocurrency prices\nasync function fetchCryptoPrices(tickers) {\n  // Using CoinAPI\n  const url = `https://rest.coinapi.io/v1/assets?filter_asset_id=${tickers.join(',')}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'X-CoinAPI-Key': COIN_API_KEY\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`CoinAPI request failed: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Format the response\n    const result = {};\n    data.forEach(asset => {\n      result[asset.asset_id] = {\n        price: asset.price_usd,\n        change_24h: asset.volume_1day_percent_change\n      };\n    });\n    return result;\n  } catch (error) {\n    console.error('Error fetching crypto prices:', error);\n    // Fallback to mock data if API fails\n    const mockResult = {};\n    tickers.forEach(ticker => {\n      mockResult[ticker] = MOCK_PRICES[ticker] || {\n        price: 100,\n        change_24h: 0\n      };\n    });\n    return mockResult;\n  }\n}\n\n// Function to fetch stock prices\nasync function fetchStockPrices(tickers) {\n  // Using Alpha Vantage\n  const result = {};\n\n  // Alpha Vantage has rate limits, so we need to fetch one by one\n  for (const ticker of tickers) {\n    const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Alpha Vantage request failed: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data['Global Quote']) {\n        const quote = data['Global Quote'];\n        const price = parseFloat(quote['05. price']);\n        const previousClose = parseFloat(quote['08. previous close']);\n        const change24h = previousClose > 0 ? (price - previousClose) / previousClose * 100 : 0;\n        result[ticker] = {\n          price,\n          change_24h: change24h\n        };\n      }\n\n      // Alpha Vantage has a rate limit, so we need to wait between requests\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.error(`Error fetching stock price for ${ticker}:`, error);\n      // Fallback to mock data if API fails\n      result[ticker] = MOCK_PRICES[ticker] || {\n        price: 100,\n        change_24h: 0\n      };\n    }\n  }\n  return result;\n}\nexport default marketService;","map":{"version":3,"names":["COIN_API_KEY","ALPHA_VANTAGE_API_KEY","priceCache","data","timestamp","expiryTime","isCrypto","ticker","cryptoList","includes","MOCK_PRICES","BTC","price","change_24h","ETH","SOL","ADA","XRP","AAPL","MSFT","AMZN","GOOGL","TSLA","META","NVDA","JPM","V","WMT","DOT","DOGE","SHIB","AVAX","MATIC","marketService","getPrices","tickers","now","Date","cachedPrices","allCached","process","env","NODE_ENV","mockResult","forEach","cryptoTickers","filter","stockTickers","results","length","cryptoData","fetchCryptoPrices","Object","assign","stockData","fetchStockPrices","error","console","url","join","response","fetch","headers","ok","Error","status","json","result","asset","asset_id","price_usd","volume_1day_percent_change","quote","parseFloat","previousClose","change24h","Promise","resolve","setTimeout"],"sources":["C:/Users/renzo/OneDrive/Desktop/dashtrae/frontend/src/services/market.js"],"sourcesContent":["// Market service for fetching real-time cryptocurrency and stock prices\r\n\r\n// API keys for external services\r\nconst COIN_API_KEY = 'YOUR_COINAPI_KEY'; // Replace with your actual API key\r\nconst ALPHA_VANTAGE_API_KEY = 'YOUR_ALPHA_VANTAGE_KEY'; // Replace with your actual API key\r\n\r\n// Cache for prices to avoid excessive API calls\r\nconst priceCache = {\r\n  data: {},\r\n  timestamp: 0,\r\n  expiryTime: 5 * 60 * 1000 // 5 minutes\r\n};\r\n\r\n// Helper function to determine if an asset is a cryptocurrency\r\nconst isCrypto = (ticker) => {\r\n  const cryptoList = ['BTC', 'ETH', 'SOL', 'ADA', 'XRP', 'DOT', 'DOGE', 'SHIB', 'AVAX', 'MATIC'];\r\n  return cryptoList.includes(ticker);\r\n};\r\n\r\n// Mock data for development\r\nconst MOCK_PRICES = {\r\n  BTC: { price: 104645, change_24h: 1.8 },\r\n  ETH: { price: 2532, change_24h: 3.2 },\r\n  SOL: { price: 172, change_24h: 5.7 },\r\n  ADA: { price: 0.7623, change_24h: 2.1 },\r\n  XRP: { price: 2.41, change_24h: 1.5 },\r\n  AAPL: { price: 211, change_24h: -0.09 },\r\n  MSFT: { price: 454, change_24h: 0.2 },\r\n  AMZN: { price: 205, change_24h: 0.5 },\r\n  GOOGL: { price: 142.30, change_24h: -0.3 },\r\n  TSLA: { price: 237.45, change_24h: 2.7 },\r\n  META: { price: 325.80, change_24h: 1.5 },\r\n  NVDA: { price: 445.20, change_24h: 3.2 },\r\n  JPM: { price: 152.75, change_24h: 0.3 },\r\n  V: { price: 235.40, change_24h: 0.7 },\r\n  WMT: { price: 59.85, change_24h: -0.2 },\r\n  DOT: { price: 7.25, change_24h: 2.3 },\r\n  DOGE: { price: 0.12, change_24h: 4.5 },\r\n  SHIB: { price: 0.00002, change_24h: 3.8 },\r\n  AVAX: { price: 35.75, change_24h: 6.2 },\r\n  MATIC: { price: 0.85, change_24h: 1.9 }\r\n};\r\n\r\nconst marketService = {\r\n  // Get current prices for a list of tickers\r\n  getPrices: async (tickers) => {\r\n    // Check if cache is valid\r\n    const now = Date.now();\r\n    if (now - priceCache.timestamp < priceCache.expiryTime) {\r\n      // Filter cached data for requested tickers\r\n      const cachedPrices = {};\r\n      let allCached = true;\r\n      \r\n      for (const ticker of tickers) {\r\n        if (priceCache.data[ticker]) {\r\n          cachedPrices[ticker] = priceCache.data[ticker];\r\n        } else {\r\n          allCached = false;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (allCached) {\r\n        return cachedPrices;\r\n      }\r\n    }\r\n    \r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      const mockResult = {};\r\n      tickers.forEach(ticker => {\r\n        mockResult[ticker] = MOCK_PRICES[ticker] || { price: 100, change_24h: 0 };\r\n      });\r\n      \r\n      // Update cache\r\n      priceCache.data = { ...priceCache.data, ...mockResult };\r\n      priceCache.timestamp = now;\r\n      \r\n      return mockResult;\r\n    }\r\n    \r\n    // In production, fetch real data\r\n    try {\r\n      const cryptoTickers = tickers.filter(isCrypto);\r\n      const stockTickers = tickers.filter(ticker => !isCrypto(ticker));\r\n      \r\n      const results = {};\r\n      \r\n      // Fetch cryptocurrency prices\r\n      if (cryptoTickers.length > 0) {\r\n        const cryptoData = await fetchCryptoPrices(cryptoTickers);\r\n        Object.assign(results, cryptoData);\r\n      }\r\n      \r\n      // Fetch stock prices\r\n      if (stockTickers.length > 0) {\r\n        const stockData = await fetchStockPrices(stockTickers);\r\n        Object.assign(results, stockData);\r\n      }\r\n      \r\n      // Update cache\r\n      priceCache.data = { ...priceCache.data, ...results };\r\n      priceCache.timestamp = now;\r\n      \r\n      return results;\r\n    } catch (error) {\r\n      console.error('Error fetching market prices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Function to fetch cryptocurrency prices\r\nasync function fetchCryptoPrices(tickers) {\r\n  // Using CoinAPI\r\n  const url = `https://rest.coinapi.io/v1/assets?filter_asset_id=${tickers.join(',')}`;\r\n  \r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'X-CoinAPI-Key': COIN_API_KEY\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`CoinAPI request failed: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Format the response\r\n    const result = {};\r\n    data.forEach(asset => {\r\n      result[asset.asset_id] = {\r\n        price: asset.price_usd,\r\n        change_24h: asset.volume_1day_percent_change\r\n      };\r\n    });\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error fetching crypto prices:', error);\r\n    // Fallback to mock data if API fails\r\n    const mockResult = {};\r\n    tickers.forEach(ticker => {\r\n      mockResult[ticker] = MOCK_PRICES[ticker] || { price: 100, change_24h: 0 };\r\n    });\r\n    return mockResult;\r\n  }\r\n}\r\n\r\n// Function to fetch stock prices\r\nasync function fetchStockPrices(tickers) {\r\n  // Using Alpha Vantage\r\n  const result = {};\r\n  \r\n  // Alpha Vantage has rate limits, so we need to fetch one by one\r\n  for (const ticker of tickers) {\r\n    const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;\r\n    \r\n    try {\r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Alpha Vantage request failed: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data['Global Quote']) {\r\n        const quote = data['Global Quote'];\r\n        const price = parseFloat(quote['05. price']);\r\n        const previousClose = parseFloat(quote['08. previous close']);\r\n        const change24h = previousClose > 0 ? ((price - previousClose) / previousClose) * 100 : 0;\r\n        \r\n        result[ticker] = {\r\n          price,\r\n          change_24h: change24h\r\n        };\r\n      }\r\n      \r\n      // Alpha Vantage has a rate limit, so we need to wait between requests\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    } catch (error) {\r\n      console.error(`Error fetching stock price for ${ticker}:`, error);\r\n      // Fallback to mock data if API fails\r\n      result[ticker] = MOCK_PRICES[ticker] || { price: 100, change_24h: 0 };\r\n    }\r\n  }\r\n  \r\n  return result;\r\n}\r\n\r\nexport default marketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}