{"ast":null,"code":"// API service for communicating with the backend\n\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Mock data for development\nconst MOCK_DATA = {\n  portfolio_summary: {\n    total_value: 24680.75,\n    daily_change_percent: 2.34,\n    assets: [{\n      ticker: 'BTC',\n      current_price: 37500,\n      total_value: 9375,\n      quantity: 0.25,\n      price_change_24h: 1.8\n    }, {\n      ticker: 'ETH',\n      current_price: 2800,\n      total_value: 5600,\n      quantity: 2,\n      price_change_24h: 3.2\n    }, {\n      ticker: 'SOL',\n      current_price: 105,\n      total_value: 2100,\n      quantity: 20,\n      price_change_24h: 5.7\n    }, {\n      ticker: 'AAPL',\n      current_price: 180.5,\n      total_value: 3610,\n      quantity: 20,\n      price_change_24h: -0.8\n    }, {\n      ticker: 'MSFT',\n      current_price: 399.25,\n      total_value: 3992.5,\n      quantity: 10,\n      price_change_24h: 1.2\n    }]\n  },\n  portfolio_history: {\n    dates: Array.from({\n      length: 30\n    }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (29 - i));\n      return date.toISOString().split('T')[0];\n    }),\n    values: Array.from({\n      length: 30\n    }, (_, i) => {\n      // Start at 20000 and end at 24680.75 with some randomness\n      const trend = 20000 + i / 29 * 4680.75;\n      return trend + (Math.random() * 1000 - 500);\n    })\n  }\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.message || 'API request failed');\n  }\n  return response.json();\n};\n\n// API service methods\nconst apiService = {\n  // Get portfolio summary\n  getPortfolioSummary: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/portfolio/summary`);\n    return handleResponse(response);\n  },\n  // Get portfolio history\n  getPortfolioHistory: async (days = 30) => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_history), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/portfolio/history?days=${days}`);\n    return handleResponse(response);\n  },\n  // Get portfolio allocation\n  getPortfolioAllocation: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary.assets), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/portfolio/allocation`);\n    return handleResponse(response);\n  },\n  // Add a new transaction\n  addTransaction: async transactionData => {\n    // For development, just log and return success\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Adding transaction:', transactionData);\n      return new Promise(resolve => {\n        setTimeout(() => resolve({\n          success: true\n        }), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/transactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(transactionData)\n    });\n    return handleResponse(response);\n  }\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","MOCK_DATA","portfolio_summary","total_value","daily_change_percent","assets","ticker","current_price","quantity","price_change_24h","portfolio_history","dates","Array","from","length","_","i","date","Date","setDate","getDate","toISOString","split","values","trend","Math","random","handleResponse","response","ok","error","json","catch","Error","message","apiService","getPortfolioSummary","process","env","NODE_ENV","Promise","resolve","setTimeout","fetch","getPortfolioHistory","days","getPortfolioAllocation","addTransaction","transactionData","console","log","success","method","headers","body","JSON","stringify"],"sources":["C:/Users/renzo/OneDrive/Desktop/dashtrae/frontend/src/services/api.js"],"sourcesContent":["// API service for communicating with the backend\r\n\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n// Mock data for development\r\nconst MOCK_DATA = {\r\n  portfolio_summary: {\r\n    total_value: 24680.75,\r\n    daily_change_percent: 2.34,\r\n    assets: [\r\n      {\r\n        ticker: 'BTC',\r\n        current_price: 37500,\r\n        total_value: 9375,\r\n        quantity: 0.25,\r\n        price_change_24h: 1.8\r\n      },\r\n      {\r\n        ticker: 'ETH',\r\n        current_price: 2800,\r\n        total_value: 5600,\r\n        quantity: 2,\r\n        price_change_24h: 3.2\r\n      },\r\n      {\r\n        ticker: 'SOL',\r\n        current_price: 105,\r\n        total_value: 2100,\r\n        quantity: 20,\r\n        price_change_24h: 5.7\r\n      },\r\n      {\r\n        ticker: 'AAPL',\r\n        current_price: 180.5,\r\n        total_value: 3610,\r\n        quantity: 20,\r\n        price_change_24h: -0.8\r\n      },\r\n      {\r\n        ticker: 'MSFT',\r\n        current_price: 399.25,\r\n        total_value: 3992.5,\r\n        quantity: 10,\r\n        price_change_24h: 1.2\r\n      }\r\n    ]\r\n  },\r\n  portfolio_history: {\r\n    dates: Array.from({ length: 30 }, (_, i) => {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - (29 - i));\r\n      return date.toISOString().split('T')[0];\r\n    }),\r\n    values: Array.from({ length: 30 }, (_, i) => {\r\n      // Start at 20000 and end at 24680.75 with some randomness\r\n      const trend = 20000 + (i / 29) * 4680.75;\r\n      return trend + (Math.random() * 1000 - 500);\r\n    })\r\n  }\r\n};\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const error = await response.json().catch(() => ({}));\r\n    throw new Error(error.message || 'API request failed');\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// API service methods\r\nconst apiService = {\r\n  // Get portfolio summary\r\n  getPortfolioSummary: async () => {\r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/portfolio/summary`);\r\n    return handleResponse(response);\r\n  },\r\n  \r\n  // Get portfolio history\r\n  getPortfolioHistory: async (days = 30) => {\r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve(MOCK_DATA.portfolio_history), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/portfolio/history?days=${days}`);\r\n    return handleResponse(response);\r\n  },\r\n  \r\n  // Get portfolio allocation\r\n  getPortfolioAllocation: async () => {\r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary.assets), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/portfolio/allocation`);\r\n    return handleResponse(response);\r\n  },\r\n  \r\n  // Add a new transaction\r\n  addTransaction: async (transactionData) => {\r\n    // For development, just log and return success\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('Adding transaction:', transactionData);\r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve({ success: true }), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/transactions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(transactionData)\r\n    });\r\n    \r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}