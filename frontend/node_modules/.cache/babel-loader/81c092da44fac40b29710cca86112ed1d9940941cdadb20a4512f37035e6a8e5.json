{"ast":null,"code":"import _objectSpread from\"E:/vestra-main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Market service for fetching real-time cryptocurrency and stock prices\n// API keys for external services\nconst COIN_API_KEY='CG-rbJJed37tsRPzLLzLRB6L2jL\t';// Reemplaza con tu clave API real\nconst ALPHA_VANTAGE_API_KEY='F68BJ1YA25QJP7J9';// Reemplaza con tu clave API real\n// Cache for prices to avoid excessive API calls\nconst priceCache={data:{},timestamp:0,expiryTime:5*60*1000// 5 minutes\n};// Helper function to determine if an asset is a cryptocurrency\nconst isCrypto=ticker=>{const cryptoList=['BTC','ETH','SOL','ADA','XRP','DOT','DOGE','SHIB','AVAX','MATIC'];return cryptoList.includes(ticker);};// Mock data for development\nconst MOCK_PRICES={BTC:{price:104645,change_24h:1.8},ETH:{price:2532,change_24h:3.2},SOL:{price:172,change_24h:5.7},ADA:{price:0.7623,change_24h:2.1},XRP:{price:2.41,change_24h:1.5},AAPL:{price:211,change_24h:-0.09},MSFT:{price:454,change_24h:0.2},AMZN:{price:205,change_24h:0.2},GOOGL:{price:166,change_24h:1.3},TSLA:{price:349,change_24h:2},META:{price:640,change_24h:-0.55},NVDA:{price:135,change_24h:0.42},JPM:{price:152.75,change_24h:0.3},V:{price:235.40,change_24h:0.7},WMT:{price:59.85,change_24h:-0.2},DOT:{price:7.25,change_24h:2.3},DOGE:{price:0.12,change_24h:4.5},SHIB:{price:0.00002,change_24h:3.8},AVAX:{price:35.75,change_24h:6.2},MATIC:{price:0.85,change_24h:1.9}};const marketService={// Get current prices for a list of tickers\ngetPrices:async tickers=>{// Check if cache is valid\nconst now=Date.now();if(now-priceCache.timestamp<priceCache.expiryTime){// Filter cached data for requested tickers\nconst cachedPrices={};let allCached=true;for(const ticker of tickers){if(priceCache.data[ticker]){cachedPrices[ticker]=priceCache.data[ticker];}else{allCached=false;break;}}if(allCached){return cachedPrices;}}// For development, return mock data\n// Comentar o eliminar esta condición\n// if (process.env.NODE_ENV === 'development') {\n//   const mockResult = {};\n//   tickers.forEach(ticker => {\n//     mockResult[ticker] = MOCK_PRICES[ticker] || { price: 100, change_24h: 0 };\n//   });\n//   \n//   // Update cache\n//   priceCache.data = { ...priceCache.data, ...mockResult };\n//   priceCache.timestamp = now;\n//   \n//   return mockResult;\n// }\n// In production, fetch real data\ntry{const cryptoTickers=tickers.filter(isCrypto);const stockTickers=tickers.filter(ticker=>!isCrypto(ticker));const results={};// Fetch cryptocurrency prices\nif(cryptoTickers.length>0){const cryptoData=await fetchCryptoPrices(cryptoTickers);Object.assign(results,cryptoData);}// Fetch stock prices\nif(stockTickers.length>0){const stockData=await fetchStockPrices(stockTickers);Object.assign(results,stockData);}// Update cache\npriceCache.data=_objectSpread(_objectSpread({},priceCache.data),results);priceCache.timestamp=now;return results;}catch(error){console.error('Error fetching market prices:',error);throw error;}}};// Function to fetch cryptocurrency prices\nasync function fetchCryptoPrices(tickers){// Using CoinAPI\nconst url=\"https://rest.coinapi.io/v1/assets?filter_asset_id=\".concat(tickers.join(','));try{const response=await fetch(url,{headers:{'X-CoinAPI-Key':COIN_API_KEY}});if(!response.ok){throw new Error(\"CoinAPI request failed: \".concat(response.status));}const data=await response.json();// Format the response\nconst result={};data.forEach(asset=>{result[asset.asset_id]={price:asset.price_usd,change_24h:asset.volume_1day_percent_change};});return result;}catch(error){console.error('Error fetching crypto prices:',error);// Fallback to mock data if API fails\nconst mockResult={};tickers.forEach(ticker=>{mockResult[ticker]=MOCK_PRICES[ticker]||{price:100,change_24h:0};});return mockResult;}}// Function to fetch stock prices\nasync function fetchStockPrices(tickers){// Using Alpha Vantage\nconst result={};// Alpha Vantage has rate limits, so we need to fetch one by one\nfor(const ticker of tickers){const url=\"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\".concat(ticker,\"&apikey=\").concat(ALPHA_VANTAGE_API_KEY);try{const response=await fetch(url);if(!response.ok){throw new Error(\"Alpha Vantage request failed: \".concat(response.status));}const data=await response.json();if(data['Global Quote']){const quote=data['Global Quote'];const price=parseFloat(quote['05. price']);const previousClose=parseFloat(quote['08. previous close']);const change24h=previousClose>0?(price-previousClose)/previousClose*100:0;result[ticker]={price,change_24h:change24h};}// Alpha Vantage has a rate limit, so we need to wait between requests\nawait new Promise(resolve=>setTimeout(resolve,1000));}catch(error){console.error(\"Error fetching stock price for \".concat(ticker,\":\"),error);// Fallback to mock data if API fails\nresult[ticker]=MOCK_PRICES[ticker]||{price:100,change_24h:0};}}return result;}export default marketService;","map":{"version":3,"names":["COIN_API_KEY","ALPHA_VANTAGE_API_KEY","priceCache","data","timestamp","expiryTime","isCrypto","ticker","cryptoList","includes","MOCK_PRICES","BTC","price","change_24h","ETH","SOL","ADA","XRP","AAPL","MSFT","AMZN","GOOGL","TSLA","META","NVDA","JPM","V","WMT","DOT","DOGE","SHIB","AVAX","MATIC","marketService","getPrices","tickers","now","Date","cachedPrices","allCached","cryptoTickers","filter","stockTickers","results","length","cryptoData","fetchCryptoPrices","Object","assign","stockData","fetchStockPrices","_objectSpread","error","console","url","concat","join","response","fetch","headers","ok","Error","status","json","result","forEach","asset","asset_id","price_usd","volume_1day_percent_change","mockResult","quote","parseFloat","previousClose","change24h","Promise","resolve","setTimeout"],"sources":["E:/vestra-main/frontend/src/services/market.js"],"sourcesContent":["// Market service for fetching real-time cryptocurrency and stock prices\n\n// API keys for external services\nconst COIN_API_KEY = 'CG-rbJJed37tsRPzLLzLRB6L2jL\t'; // Reemplaza con tu clave API real\nconst ALPHA_VANTAGE_API_KEY = 'F68BJ1YA25QJP7J9'; // Reemplaza con tu clave API real\n\n// Cache for prices to avoid excessive API calls\nconst priceCache = {\n  data: {},\n  timestamp: 0,\n  expiryTime: 5 * 60 * 1000 // 5 minutes\n};\n\n// Helper function to determine if an asset is a cryptocurrency\nconst isCrypto = (ticker) => {\n  const cryptoList = ['BTC', 'ETH', 'SOL', 'ADA', 'XRP', 'DOT', 'DOGE', 'SHIB', 'AVAX', 'MATIC'];\n  return cryptoList.includes(ticker);\n};\n\n// Mock data for development\nconst MOCK_PRICES = {\n  BTC: { price: 104645, change_24h: 1.8 },\n  ETH: { price: 2532, change_24h: 3.2 },\n  SOL: { price: 172, change_24h: 5.7 },\n  ADA: { price: 0.7623, change_24h: 2.1 },\n  XRP: { price: 2.41, change_24h: 1.5 },\n  AAPL: { price: 211, change_24h: -0.09 },\n  MSFT: { price: 454, change_24h: 0.2 },\n  AMZN: { price: 205, change_24h: 0.2 },\n  GOOGL: { price: 166, change_24h: 1.3 },\n  TSLA: { price: 349, change_24h: 2 },\n  META: { price: 640, change_24h: -0.55 },\n  NVDA: { price: 135, change_24h: 0.42 },\n  JPM: { price: 152.75, change_24h: 0.3 },\n  V: { price: 235.40, change_24h: 0.7 },\n  WMT: { price: 59.85, change_24h: -0.2 },\n  DOT: { price: 7.25, change_24h: 2.3 },\n  DOGE: { price: 0.12, change_24h: 4.5 },\n  SHIB: { price: 0.00002, change_24h: 3.8 },\n  AVAX: { price: 35.75, change_24h: 6.2 },\n  MATIC: { price: 0.85, change_24h: 1.9 }\n};\n\nconst marketService = {\n  // Get current prices for a list of tickers\n  getPrices: async (tickers) => {\n    // Check if cache is valid\n    const now = Date.now();\n    if (now - priceCache.timestamp < priceCache.expiryTime) {\n      // Filter cached data for requested tickers\n      const cachedPrices = {};\n      let allCached = true;\n      \n      for (const ticker of tickers) {\n        if (priceCache.data[ticker]) {\n          cachedPrices[ticker] = priceCache.data[ticker];\n        } else {\n          allCached = false;\n          break;\n        }\n      }\n      \n      if (allCached) {\n        return cachedPrices;\n      }\n    }\n    \n    // For development, return mock data\n    // Comentar o eliminar esta condición\n    // if (process.env.NODE_ENV === 'development') {\n    //   const mockResult = {};\n    //   tickers.forEach(ticker => {\n    //     mockResult[ticker] = MOCK_PRICES[ticker] || { price: 100, change_24h: 0 };\n    //   });\n    //   \n    //   // Update cache\n    //   priceCache.data = { ...priceCache.data, ...mockResult };\n    //   priceCache.timestamp = now;\n    //   \n    //   return mockResult;\n    // }\n    \n    // In production, fetch real data\n    try {\n      const cryptoTickers = tickers.filter(isCrypto);\n      const stockTickers = tickers.filter(ticker => !isCrypto(ticker));\n      \n      const results = {};\n      \n      // Fetch cryptocurrency prices\n      if (cryptoTickers.length > 0) {\n        const cryptoData = await fetchCryptoPrices(cryptoTickers);\n        Object.assign(results, cryptoData);\n      }\n      \n      // Fetch stock prices\n      if (stockTickers.length > 0) {\n        const stockData = await fetchStockPrices(stockTickers);\n        Object.assign(results, stockData);\n      }\n      \n      // Update cache\n      priceCache.data = { ...priceCache.data, ...results };\n      priceCache.timestamp = now;\n      \n      return results;\n    } catch (error) {\n      console.error('Error fetching market prices:', error);\n      throw error;\n    }\n  }\n};\n\n// Function to fetch cryptocurrency prices\nasync function fetchCryptoPrices(tickers) {\n  // Using CoinAPI\n  const url = `https://rest.coinapi.io/v1/assets?filter_asset_id=${tickers.join(',')}`;\n  \n  try {\n    const response = await fetch(url, {\n      headers: {\n        'X-CoinAPI-Key': COIN_API_KEY\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`CoinAPI request failed: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Format the response\n    const result = {};\n    data.forEach(asset => {\n      result[asset.asset_id] = {\n        price: asset.price_usd,\n        change_24h: asset.volume_1day_percent_change\n      };\n    });\n    \n    return result;\n  } catch (error) {\n    console.error('Error fetching crypto prices:', error);\n    // Fallback to mock data if API fails\n    const mockResult = {};\n    tickers.forEach(ticker => {\n      mockResult[ticker] = MOCK_PRICES[ticker] || { price: 100, change_24h: 0 };\n    });\n    return mockResult;\n  }\n}\n\n// Function to fetch stock prices\nasync function fetchStockPrices(tickers) {\n  // Using Alpha Vantage\n  const result = {};\n  \n  // Alpha Vantage has rate limits, so we need to fetch one by one\n  for (const ticker of tickers) {\n    const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;\n    \n    try {\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`Alpha Vantage request failed: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      if (data['Global Quote']) {\n        const quote = data['Global Quote'];\n        const price = parseFloat(quote['05. price']);\n        const previousClose = parseFloat(quote['08. previous close']);\n        const change24h = previousClose > 0 ? ((price - previousClose) / previousClose) * 100 : 0;\n        \n        result[ticker] = {\n          price,\n          change_24h: change24h\n        };\n      }\n      \n      // Alpha Vantage has a rate limit, so we need to wait between requests\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      console.error(`Error fetching stock price for ${ticker}:`, error);\n      // Fallback to mock data if API fails\n      result[ticker] = MOCK_PRICES[ticker] || { price: 100, change_24h: 0 };\n    }\n  }\n  \n  return result;\n}\n\nexport default marketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}