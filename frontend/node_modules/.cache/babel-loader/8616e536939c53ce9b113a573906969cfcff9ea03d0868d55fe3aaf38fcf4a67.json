{"ast":null,"code":"import _objectSpread from\"E:/vestra-main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// API service for communicating with the backend\nconst API_BASE_URL='http://localhost:8000/api';// Mock data for development\nconst MOCK_DATA={portfolio_summary:{total_value:24680.75,daily_change_percent:2.34,assets:[{ticker:'BTC',current_price:37500,total_value:9375,quantity:0.25,price_change_24h:1.8},{ticker:'ETH',current_price:2800,total_value:5600,quantity:2,price_change_24h:3.2},{ticker:'SOL',current_price:105,total_value:2100,quantity:20,price_change_24h:5.7},{ticker:'AAPL',current_price:180.5,total_value:3610,quantity:20,price_change_24h:-0.8},{ticker:'MSFT',current_price:399.25,total_value:3992.5,quantity:10,price_change_24h:1.2}]},portfolio_history:{dates:Array.from({length:30},(_,i)=>{const date=new Date();date.setDate(date.getDate()-(29-i));return date.toISOString().split('T')[0];}),values:Array.from({length:30},(_,i)=>{// Start at 20000 and end at 24680.75 with some randomness\nconst trend=20000+i/29*4680.75;return trend+(Math.random()*1000-500);})}};// Helper function to handle API responses\nconst handleResponse=async response=>{if(!response.ok){const error=await response.json().catch(()=>({}));throw new Error(error.message||'API request failed');}return response.json();};// Mock transactions data for development\nconst MOCK_TRANSACTIONS=[{id:1,ticker:'BTC',quantity:0.25,price:35000,timestamp:new Date('2023-01-15').getTime()},{id:2,ticker:'ETH',quantity:2,price:2500,timestamp:new Date('2023-02-10').getTime()},{id:3,ticker:'SOL',quantity:20,price:90,timestamp:new Date('2023-03-05').getTime()},{id:4,ticker:'AAPL',quantity:20,price:175,timestamp:new Date('2023-02-20').getTime()},{id:5,ticker:'MSFT',quantity:10,price:380,timestamp:new Date('2023-03-15').getTime()}];// API service methods\nconst apiService={// Get portfolio summary\ngetPortfolioSummary:async()=>{// For development, return mock data\nif(process.env.NODE_ENV==='development'){return new Promise(resolve=>{setTimeout(()=>resolve(MOCK_DATA.portfolio_summary),500);});}const response=await fetch(\"\".concat(API_BASE_URL,\"/portfolio/summary\"));return handleResponse(response);},// Get portfolio history\ngetPortfolioHistory:async function(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;// For development, return mock data\nif(process.env.NODE_ENV==='development'){return new Promise(resolve=>{setTimeout(()=>resolve(MOCK_DATA.portfolio_history),500);});}const response=await fetch(\"\".concat(API_BASE_URL,\"/portfolio/history?days=\").concat(days));return handleResponse(response);},// Get portfolio allocation\ngetPortfolioAllocation:async()=>{// For development, return mock data\nif(process.env.NODE_ENV==='development'){return new Promise(resolve=>{setTimeout(()=>resolve(MOCK_DATA.portfolio_summary.assets),500);});}const response=await fetch(\"\".concat(API_BASE_URL,\"/portfolio/allocation\"));return handleResponse(response);},// Get all user transactions\ngetTransactions:async()=>{// For development, return mock data\nif(process.env.NODE_ENV==='development'){// Get transactions from localStorage or use mock data if none exist\nconst storedTransactions=localStorage.getItem('transactions');const transactions=storedTransactions?JSON.parse(storedTransactions):[...MOCK_TRANSACTIONS];return new Promise(resolve=>{setTimeout(()=>resolve(transactions),500);});}const response=await fetch(\"\".concat(API_BASE_URL,\"/transactions\"));return handleResponse(response);},// Add a new transaction\naddTransaction:async transactionData=>{// For development, just log and return success\nif(process.env.NODE_ENV==='development'){console.log('Adding transaction:',transactionData);// Get existing transactions from localStorage or use mock data\nconst storedTransactions=localStorage.getItem('transactions');const transactions=storedTransactions?JSON.parse(storedTransactions):[...MOCK_TRANSACTIONS];// Add to transactions\nconst newTransaction=_objectSpread(_objectSpread({id:transactions.length+1},transactionData),{},{timestamp:Date.now()});transactions.push(newTransaction);// Save back to localStorage\nlocalStorage.setItem('transactions',JSON.stringify(transactions));return new Promise(resolve=>{setTimeout(()=>resolve({success:true,transaction:newTransaction}),500);});}const response=await fetch(\"\".concat(API_BASE_URL,\"/transactions\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(transactionData)});return handleResponse(response);}};export default apiService;","map":{"version":3,"names":["API_BASE_URL","MOCK_DATA","portfolio_summary","total_value","daily_change_percent","assets","ticker","current_price","quantity","price_change_24h","portfolio_history","dates","Array","from","length","_","i","date","Date","setDate","getDate","toISOString","split","values","trend","Math","random","handleResponse","response","ok","error","json","catch","Error","message","MOCK_TRANSACTIONS","id","price","timestamp","getTime","apiService","getPortfolioSummary","process","env","NODE_ENV","Promise","resolve","setTimeout","fetch","concat","getPortfolioHistory","days","arguments","undefined","getPortfolioAllocation","getTransactions","storedTransactions","localStorage","getItem","transactions","JSON","parse","addTransaction","transactionData","console","log","newTransaction","_objectSpread","now","push","setItem","stringify","success","transaction","method","headers","body"],"sources":["E:/vestra-main/frontend/src/services/api.js"],"sourcesContent":["// API service for communicating with the backend\n\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Mock data for development\nconst MOCK_DATA = {\n  portfolio_summary: {\n    total_value: 24680.75,\n    daily_change_percent: 2.34,\n    assets: [\n      {\n        ticker: 'BTC',\n        current_price: 37500,\n        total_value: 9375,\n        quantity: 0.25,\n        price_change_24h: 1.8\n      },\n      {\n        ticker: 'ETH',\n        current_price: 2800,\n        total_value: 5600,\n        quantity: 2,\n        price_change_24h: 3.2\n      },\n      {\n        ticker: 'SOL',\n        current_price: 105,\n        total_value: 2100,\n        quantity: 20,\n        price_change_24h: 5.7\n      },\n      {\n        ticker: 'AAPL',\n        current_price: 180.5,\n        total_value: 3610,\n        quantity: 20,\n        price_change_24h: -0.8\n      },\n      {\n        ticker: 'MSFT',\n        current_price: 399.25,\n        total_value: 3992.5,\n        quantity: 10,\n        price_change_24h: 1.2\n      }\n    ]\n  },\n  portfolio_history: {\n    dates: Array.from({ length: 30 }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (29 - i));\n      return date.toISOString().split('T')[0];\n    }),\n    values: Array.from({ length: 30 }, (_, i) => {\n      // Start at 20000 and end at 24680.75 with some randomness\n      const trend = 20000 + (i / 29) * 4680.75;\n      return trend + (Math.random() * 1000 - 500);\n    })\n  }\n};\n\n// Helper function to handle API responses\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.message || 'API request failed');\n  }\n  return response.json();\n};\n\n// Mock transactions data for development\nconst MOCK_TRANSACTIONS = [\n  {\n    id: 1,\n    ticker: 'BTC',\n    quantity: 0.25,\n    price: 35000,\n    timestamp: new Date('2023-01-15').getTime()\n  },\n  {\n    id: 2,\n    ticker: 'ETH',\n    quantity: 2,\n    price: 2500,\n    timestamp: new Date('2023-02-10').getTime()\n  },\n  {\n    id: 3,\n    ticker: 'SOL',\n    quantity: 20,\n    price: 90,\n    timestamp: new Date('2023-03-05').getTime()\n  },\n  {\n    id: 4,\n    ticker: 'AAPL',\n    quantity: 20,\n    price: 175,\n    timestamp: new Date('2023-02-20').getTime()\n  },\n  {\n    id: 5,\n    ticker: 'MSFT',\n    quantity: 10,\n    price: 380,\n    timestamp: new Date('2023-03-15').getTime()\n  }\n];\n\n// API service methods\nconst apiService = {\n  // Get portfolio summary\n  getPortfolioSummary: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary), 500);\n      });\n    }\n    \n    const response = await fetch(`${API_BASE_URL}/portfolio/summary`);\n    return handleResponse(response);\n  },\n  \n  // Get portfolio history\n  getPortfolioHistory: async (days = 30) => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_history), 500);\n      });\n    }\n    \n    const response = await fetch(`${API_BASE_URL}/portfolio/history?days=${days}`);\n    return handleResponse(response);\n  },\n  \n  // Get portfolio allocation\n  getPortfolioAllocation: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary.assets), 500);\n      });\n    }\n    \n    const response = await fetch(`${API_BASE_URL}/portfolio/allocation`);\n    return handleResponse(response);\n  },\n  \n  // Get all user transactions\n  getTransactions: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      // Get transactions from localStorage or use mock data if none exist\n      const storedTransactions = localStorage.getItem('transactions');\n      const transactions = storedTransactions ? JSON.parse(storedTransactions) : [...MOCK_TRANSACTIONS];\n      \n      return new Promise(resolve => {\n        setTimeout(() => resolve(transactions), 500);\n      });\n    }\n    \n    const response = await fetch(`${API_BASE_URL}/transactions`);\n    return handleResponse(response);\n  },\n  \n  // Add a new transaction\n  addTransaction: async (transactionData) => {\n    // For development, just log and return success\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Adding transaction:', transactionData);\n      \n      // Get existing transactions from localStorage or use mock data\n      const storedTransactions = localStorage.getItem('transactions');\n      const transactions = storedTransactions ? JSON.parse(storedTransactions) : [...MOCK_TRANSACTIONS];\n      \n      // Add to transactions\n      const newTransaction = {\n        id: transactions.length + 1,\n        ...transactionData,\n        timestamp: Date.now()\n      };\n      \n      transactions.push(newTransaction);\n      \n      // Save back to localStorage\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n      \n      return new Promise(resolve => {\n        setTimeout(() => resolve({ success: true, transaction: newTransaction }), 500);\n      });\n    }\n    \n    const response = await fetch(`${API_BASE_URL}/transactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(transactionData)\n    });\n    \n    return handleResponse(response);\n  }\n};\n\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}