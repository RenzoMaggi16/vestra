{"ast":null,"code":"// API service for communicating with the backend\n\nconst API_BASE_URL = 'http://localhost:8000/api';\n\n// Mock data for development\nconst MOCK_DATA = {\n  portfolio_summary: {\n    total_value: 24680.75,\n    daily_change_percent: 2.34,\n    assets: [{\n      ticker: 'BTC',\n      current_price: 37500,\n      total_value: 9375,\n      quantity: 0.25,\n      price_change_24h: 1.8\n    }, {\n      ticker: 'ETH',\n      current_price: 2800,\n      total_value: 5600,\n      quantity: 2,\n      price_change_24h: 3.2\n    }, {\n      ticker: 'SOL',\n      current_price: 105,\n      total_value: 2100,\n      quantity: 20,\n      price_change_24h: 5.7\n    }, {\n      ticker: 'AAPL',\n      current_price: 180.5,\n      total_value: 3610,\n      quantity: 20,\n      price_change_24h: -0.8\n    }, {\n      ticker: 'MSFT',\n      current_price: 399.25,\n      total_value: 3992.5,\n      quantity: 10,\n      price_change_24h: 1.2\n    }]\n  },\n  portfolio_history: {\n    dates: Array.from({\n      length: 30\n    }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (29 - i));\n      return date.toISOString().split('T')[0];\n    }),\n    values: Array.from({\n      length: 30\n    }, (_, i) => {\n      // Start at 20000 and end at 24680.75 with some randomness\n      const trend = 20000 + i / 29 * 4680.75;\n      return trend + (Math.random() * 1000 - 500);\n    })\n  }\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.message || 'API request failed');\n  }\n  return response.json();\n};\n\n// Mock transactions data for development\nconst MOCK_TRANSACTIONS = [{\n  id: 1,\n  ticker: 'BTC',\n  quantity: 0.25,\n  price: 35000,\n  timestamp: new Date('2023-01-15').getTime()\n}, {\n  id: 2,\n  ticker: 'ETH',\n  quantity: 2,\n  price: 2500,\n  timestamp: new Date('2023-02-10').getTime()\n}, {\n  id: 3,\n  ticker: 'SOL',\n  quantity: 20,\n  price: 90,\n  timestamp: new Date('2023-03-05').getTime()\n}, {\n  id: 4,\n  ticker: 'AAPL',\n  quantity: 20,\n  price: 175,\n  timestamp: new Date('2023-02-20').getTime()\n}, {\n  id: 5,\n  ticker: 'MSFT',\n  quantity: 10,\n  price: 380,\n  timestamp: new Date('2023-03-15').getTime()\n}];\n\n// API service methods\nconst apiService = {\n  // Get portfolio summary\n  getPortfolioSummary: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/portfolio/summary`);\n    return handleResponse(response);\n  },\n  // Get portfolio history\n  getPortfolioHistory: async (days = 30) => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_history), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/portfolio/history?days=${days}`);\n    return handleResponse(response);\n  },\n  // Get portfolio allocation\n  getPortfolioAllocation: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary.assets), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/portfolio/allocation`);\n    return handleResponse(response);\n  },\n  // Get all user transactions\n  getTransactions: async () => {\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      // Get transactions from localStorage or use mock data if none exist\n      const storedTransactions = localStorage.getItem('transactions');\n      const transactions = storedTransactions ? JSON.parse(storedTransactions) : [...MOCK_TRANSACTIONS];\n      return new Promise(resolve => {\n        setTimeout(() => resolve(transactions), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/transactions`);\n    return handleResponse(response);\n  },\n  // Add a new transaction\n  addTransaction: async transactionData => {\n    // For development, just log and return success\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Adding transaction:', transactionData);\n\n      // Get existing transactions from localStorage or use mock data\n      const storedTransactions = localStorage.getItem('transactions');\n      const transactions = storedTransactions ? JSON.parse(storedTransactions) : [...MOCK_TRANSACTIONS];\n\n      // Add to transactions\n      const newTransaction = {\n        id: transactions.length + 1,\n        ...transactionData,\n        timestamp: Date.now()\n      };\n      transactions.push(newTransaction);\n\n      // Save back to localStorage\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n      return new Promise(resolve => {\n        setTimeout(() => resolve({\n          success: true,\n          transaction: newTransaction\n        }), 500);\n      });\n    }\n    const response = await fetch(`${API_BASE_URL}/transactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(transactionData)\n    });\n    return handleResponse(response);\n  }\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","MOCK_DATA","portfolio_summary","total_value","daily_change_percent","assets","ticker","current_price","quantity","price_change_24h","portfolio_history","dates","Array","from","length","_","i","date","Date","setDate","getDate","toISOString","split","values","trend","Math","random","handleResponse","response","ok","error","json","catch","Error","message","MOCK_TRANSACTIONS","id","price","timestamp","getTime","apiService","getPortfolioSummary","process","env","NODE_ENV","Promise","resolve","setTimeout","fetch","getPortfolioHistory","days","getPortfolioAllocation","getTransactions","storedTransactions","localStorage","getItem","transactions","JSON","parse","addTransaction","transactionData","console","log","newTransaction","now","push","setItem","stringify","success","transaction","method","headers","body"],"sources":["C:/Users/renzo/OneDrive/Desktop/dashtrae/frontend/src/services/api.js"],"sourcesContent":["// API service for communicating with the backend\r\n\r\nconst API_BASE_URL = 'http://localhost:8000/api';\r\n\r\n// Mock data for development\r\nconst MOCK_DATA = {\r\n  portfolio_summary: {\r\n    total_value: 24680.75,\r\n    daily_change_percent: 2.34,\r\n    assets: [\r\n      {\r\n        ticker: 'BTC',\r\n        current_price: 37500,\r\n        total_value: 9375,\r\n        quantity: 0.25,\r\n        price_change_24h: 1.8\r\n      },\r\n      {\r\n        ticker: 'ETH',\r\n        current_price: 2800,\r\n        total_value: 5600,\r\n        quantity: 2,\r\n        price_change_24h: 3.2\r\n      },\r\n      {\r\n        ticker: 'SOL',\r\n        current_price: 105,\r\n        total_value: 2100,\r\n        quantity: 20,\r\n        price_change_24h: 5.7\r\n      },\r\n      {\r\n        ticker: 'AAPL',\r\n        current_price: 180.5,\r\n        total_value: 3610,\r\n        quantity: 20,\r\n        price_change_24h: -0.8\r\n      },\r\n      {\r\n        ticker: 'MSFT',\r\n        current_price: 399.25,\r\n        total_value: 3992.5,\r\n        quantity: 10,\r\n        price_change_24h: 1.2\r\n      }\r\n    ]\r\n  },\r\n  portfolio_history: {\r\n    dates: Array.from({ length: 30 }, (_, i) => {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - (29 - i));\r\n      return date.toISOString().split('T')[0];\r\n    }),\r\n    values: Array.from({ length: 30 }, (_, i) => {\r\n      // Start at 20000 and end at 24680.75 with some randomness\r\n      const trend = 20000 + (i / 29) * 4680.75;\r\n      return trend + (Math.random() * 1000 - 500);\r\n    })\r\n  }\r\n};\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const error = await response.json().catch(() => ({}));\r\n    throw new Error(error.message || 'API request failed');\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Mock transactions data for development\r\nconst MOCK_TRANSACTIONS = [\r\n  {\r\n    id: 1,\r\n    ticker: 'BTC',\r\n    quantity: 0.25,\r\n    price: 35000,\r\n    timestamp: new Date('2023-01-15').getTime()\r\n  },\r\n  {\r\n    id: 2,\r\n    ticker: 'ETH',\r\n    quantity: 2,\r\n    price: 2500,\r\n    timestamp: new Date('2023-02-10').getTime()\r\n  },\r\n  {\r\n    id: 3,\r\n    ticker: 'SOL',\r\n    quantity: 20,\r\n    price: 90,\r\n    timestamp: new Date('2023-03-05').getTime()\r\n  },\r\n  {\r\n    id: 4,\r\n    ticker: 'AAPL',\r\n    quantity: 20,\r\n    price: 175,\r\n    timestamp: new Date('2023-02-20').getTime()\r\n  },\r\n  {\r\n    id: 5,\r\n    ticker: 'MSFT',\r\n    quantity: 10,\r\n    price: 380,\r\n    timestamp: new Date('2023-03-15').getTime()\r\n  }\r\n];\r\n\r\n// API service methods\r\nconst apiService = {\r\n  // Get portfolio summary\r\n  getPortfolioSummary: async () => {\r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/portfolio/summary`);\r\n    return handleResponse(response);\r\n  },\r\n  \r\n  // Get portfolio history\r\n  getPortfolioHistory: async (days = 30) => {\r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve(MOCK_DATA.portfolio_history), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/portfolio/history?days=${days}`);\r\n    return handleResponse(response);\r\n  },\r\n  \r\n  // Get portfolio allocation\r\n  getPortfolioAllocation: async () => {\r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve(MOCK_DATA.portfolio_summary.assets), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/portfolio/allocation`);\r\n    return handleResponse(response);\r\n  },\r\n  \r\n  // Get all user transactions\r\n  getTransactions: async () => {\r\n    // For development, return mock data\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Get transactions from localStorage or use mock data if none exist\r\n      const storedTransactions = localStorage.getItem('transactions');\r\n      const transactions = storedTransactions ? JSON.parse(storedTransactions) : [...MOCK_TRANSACTIONS];\r\n      \r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve(transactions), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/transactions`);\r\n    return handleResponse(response);\r\n  },\r\n  \r\n  // Add a new transaction\r\n  addTransaction: async (transactionData) => {\r\n    // For development, just log and return success\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('Adding transaction:', transactionData);\r\n      \r\n      // Get existing transactions from localStorage or use mock data\r\n      const storedTransactions = localStorage.getItem('transactions');\r\n      const transactions = storedTransactions ? JSON.parse(storedTransactions) : [...MOCK_TRANSACTIONS];\r\n      \r\n      // Add to transactions\r\n      const newTransaction = {\r\n        id: transactions.length + 1,\r\n        ...transactionData,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      transactions.push(newTransaction);\r\n      \r\n      // Save back to localStorage\r\n      localStorage.setItem('transactions', JSON.stringify(transactions));\r\n      \r\n      return new Promise(resolve => {\r\n        setTimeout(() => resolve({ success: true, transaction: newTransaction }), 500);\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`${API_BASE_URL}/transactions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(transactionData)\r\n    });\r\n    \r\n    return handleResponse(response);\r\n  }\r\n};\r\n\r\nexport default apiService;"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,SAAS,GAAG;EAChBC,iBAAiB,EAAE;IACjBC,WAAW,EAAE,QAAQ;IACrBC,oBAAoB,EAAE,IAAI;IAC1BC,MAAM,EAAE,CACN;MACEC,MAAM,EAAE,KAAK;MACbC,aAAa,EAAE,KAAK;MACpBJ,WAAW,EAAE,IAAI;MACjBK,QAAQ,EAAE,IAAI;MACdC,gBAAgB,EAAE;IACpB,CAAC,EACD;MACEH,MAAM,EAAE,KAAK;MACbC,aAAa,EAAE,IAAI;MACnBJ,WAAW,EAAE,IAAI;MACjBK,QAAQ,EAAE,CAAC;MACXC,gBAAgB,EAAE;IACpB,CAAC,EACD;MACEH,MAAM,EAAE,KAAK;MACbC,aAAa,EAAE,GAAG;MAClBJ,WAAW,EAAE,IAAI;MACjBK,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE;IACpB,CAAC,EACD;MACEH,MAAM,EAAE,MAAM;MACdC,aAAa,EAAE,KAAK;MACpBJ,WAAW,EAAE,IAAI;MACjBK,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE,CAAC;IACrB,CAAC,EACD;MACEH,MAAM,EAAE,MAAM;MACdC,aAAa,EAAE,MAAM;MACrBJ,WAAW,EAAE,MAAM;MACnBK,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE;IACpB,CAAC;EAEL,CAAC;EACDC,iBAAiB,EAAE;IACjBC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC1C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;MACvBD,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,IAAI,EAAE,GAAGJ,CAAC,CAAC,CAAC;MACvC,OAAOC,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;IACFC,MAAM,EAAEX,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC3C;MACA,MAAMQ,KAAK,GAAG,KAAK,GAAIR,CAAC,GAAG,EAAE,GAAI,OAAO;MACxC,OAAOQ,KAAK,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;IAC7C,CAAC;EACH;AACF,CAAC;;AAED;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACrD,MAAM,IAAIC,KAAK,CAACH,KAAK,CAACI,OAAO,IAAI,oBAAoB,CAAC;EACxD;EACA,OAAON,QAAQ,CAACG,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,MAAMI,iBAAiB,GAAG,CACxB;EACEC,EAAE,EAAE,CAAC;EACL9B,MAAM,EAAE,KAAK;EACbE,QAAQ,EAAE,IAAI;EACd6B,KAAK,EAAE,KAAK;EACZC,SAAS,EAAE,IAAIpB,IAAI,CAAC,YAAY,CAAC,CAACqB,OAAO,CAAC;AAC5C,CAAC,EACD;EACEH,EAAE,EAAE,CAAC;EACL9B,MAAM,EAAE,KAAK;EACbE,QAAQ,EAAE,CAAC;EACX6B,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE,IAAIpB,IAAI,CAAC,YAAY,CAAC,CAACqB,OAAO,CAAC;AAC5C,CAAC,EACD;EACEH,EAAE,EAAE,CAAC;EACL9B,MAAM,EAAE,KAAK;EACbE,QAAQ,EAAE,EAAE;EACZ6B,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,IAAIpB,IAAI,CAAC,YAAY,CAAC,CAACqB,OAAO,CAAC;AAC5C,CAAC,EACD;EACEH,EAAE,EAAE,CAAC;EACL9B,MAAM,EAAE,MAAM;EACdE,QAAQ,EAAE,EAAE;EACZ6B,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,IAAIpB,IAAI,CAAC,YAAY,CAAC,CAACqB,OAAO,CAAC;AAC5C,CAAC,EACD;EACEH,EAAE,EAAE,CAAC;EACL9B,MAAM,EAAE,MAAM;EACdE,QAAQ,EAAE,EAAE;EACZ6B,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,IAAIpB,IAAI,CAAC,YAAY,CAAC,CAACqB,OAAO,CAAC;AAC5C,CAAC,CACF;;AAED;AACA,MAAMC,UAAU,GAAG;EACjB;EACAC,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B;IACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1C,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;QAC5BC,UAAU,CAAC,MAAMD,OAAO,CAAC7C,SAAS,CAACC,iBAAiB,CAAC,EAAE,GAAG,CAAC;MAC7D,CAAC,CAAC;IACJ;IAEA,MAAM0B,QAAQ,GAAG,MAAMoB,KAAK,CAAC,GAAGhD,YAAY,oBAAoB,CAAC;IACjE,OAAO2B,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACAqB,mBAAmB,EAAE,MAAAA,CAAOC,IAAI,GAAG,EAAE,KAAK;IACxC;IACA,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1C,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;QAC5BC,UAAU,CAAC,MAAMD,OAAO,CAAC7C,SAAS,CAACS,iBAAiB,CAAC,EAAE,GAAG,CAAC;MAC7D,CAAC,CAAC;IACJ;IAEA,MAAMkB,QAAQ,GAAG,MAAMoB,KAAK,CAAC,GAAGhD,YAAY,2BAA2BkD,IAAI,EAAE,CAAC;IAC9E,OAAOvB,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACAuB,sBAAsB,EAAE,MAAAA,CAAA,KAAY;IAClC;IACA,IAAIT,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1C,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;QAC5BC,UAAU,CAAC,MAAMD,OAAO,CAAC7C,SAAS,CAACC,iBAAiB,CAACG,MAAM,CAAC,EAAE,GAAG,CAAC;MACpE,CAAC,CAAC;IACJ;IAEA,MAAMuB,QAAQ,GAAG,MAAMoB,KAAK,CAAC,GAAGhD,YAAY,uBAAuB,CAAC;IACpE,OAAO2B,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACAwB,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B;IACA,IAAIV,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1C;MACA,MAAMS,kBAAkB,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAC/D,MAAMC,YAAY,GAAGH,kBAAkB,GAAGI,IAAI,CAACC,KAAK,CAACL,kBAAkB,CAAC,GAAG,CAAC,GAAGlB,iBAAiB,CAAC;MAEjG,OAAO,IAAIU,OAAO,CAACC,OAAO,IAAI;QAC5BC,UAAU,CAAC,MAAMD,OAAO,CAACU,YAAY,CAAC,EAAE,GAAG,CAAC;MAC9C,CAAC,CAAC;IACJ;IAEA,MAAM5B,QAAQ,GAAG,MAAMoB,KAAK,CAAC,GAAGhD,YAAY,eAAe,CAAC;IAC5D,OAAO2B,cAAc,CAACC,QAAQ,CAAC;EACjC,CAAC;EAED;EACA+B,cAAc,EAAE,MAAOC,eAAe,IAAK;IACzC;IACA,IAAIlB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1CiB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,eAAe,CAAC;;MAEnD;MACA,MAAMP,kBAAkB,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAC/D,MAAMC,YAAY,GAAGH,kBAAkB,GAAGI,IAAI,CAACC,KAAK,CAACL,kBAAkB,CAAC,GAAG,CAAC,GAAGlB,iBAAiB,CAAC;;MAEjG;MACA,MAAM4B,cAAc,GAAG;QACrB3B,EAAE,EAAEoB,YAAY,CAAC1C,MAAM,GAAG,CAAC;QAC3B,GAAG8C,eAAe;QAClBtB,SAAS,EAAEpB,IAAI,CAAC8C,GAAG,CAAC;MACtB,CAAC;MAEDR,YAAY,CAACS,IAAI,CAACF,cAAc,CAAC;;MAEjC;MACAT,YAAY,CAACY,OAAO,CAAC,cAAc,EAAET,IAAI,CAACU,SAAS,CAACX,YAAY,CAAC,CAAC;MAElE,OAAO,IAAIX,OAAO,CAACC,OAAO,IAAI;QAC5BC,UAAU,CAAC,MAAMD,OAAO,CAAC;UAAEsB,OAAO,EAAE,IAAI;UAAEC,WAAW,EAAEN;QAAe,CAAC,CAAC,EAAE,GAAG,CAAC;MAChF,CAAC,CAAC;IACJ;IAEA,MAAMnC,QAAQ,GAAG,MAAMoB,KAAK,CAAC,GAAGhD,YAAY,eAAe,EAAE;MAC3DsE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEf,IAAI,CAACU,SAAS,CAACP,eAAe;IACtC,CAAC,CAAC;IAEF,OAAOjC,cAAc,CAACC,QAAQ,CAAC;EACjC;AACF,CAAC;AAED,eAAeY,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}